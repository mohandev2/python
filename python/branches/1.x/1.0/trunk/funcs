#!/usr/bin/python

from ohpi import *
from types import *

rpt = SaHpiRptEntryT()
di = SaHpiDomainInfoT()

def res_caps(rpt):
	cap = ""
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_RESOURCE)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "Res"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_RDR)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "Rdr"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_EVENT_LOG)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "EvL"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_POWER)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "Pwr"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_RESET)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "Rst"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_SENSOR)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "Sen"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_CONTROL)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "Cnt"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_INVENTORY_DATA)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "Inv"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_WATCHDOG)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "Wtd"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_ANNUNCIATOR)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "Ann"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_FRU)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "Fru"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_MANAGED_HOTSWAP)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "MHs"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_AGGREGATE_STATUS)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "AgS"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_CONFIGURATION)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "Cfg"
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_EVT_DEASSERTS)):
		if (cap != ""): cap = cap + ":"
		cap = cap + "EvD"
	return cap

def make_epath(e):
	ep = list()
	for j in range(len(e)):
		ee = (oh_lookup_entitytype(e[j][0]), e[j][1])
		ep.append(ee)
	return ep


def lsres():
	eid = SAHPI_FIRST_ENTRY
	while (1):
		res = saHpiRptEntryGet(session, eid, rpt)
		if (res['rv'] != 0):
			return
		print "%03i %-30s %s\t%s" % (rpt.EntryId, rpt.ResourceTag.Data, res_caps(rpt), \
                    make_epath(rpt.ResourceEntity))
		eid = res['NextEntryId']
	pass


def showallrdrs():
	eid = SAHPI_FIRST_ENTRY
	while (1):
		res = saHpiRptEntryGet(session, eid, rpt)
		if (res['rv'] != 0):
			return
		showrdrs(rpt.EntryId)
		eid = res['NextEntryId']
	pass




def domaininfo():
        rv = saHpiDomainInfoGet(session, di)
        if (rv != SA_OK):
		print "Error: saHpiDomainInfoGet returned", oh_lookup_error(rv)
		return
	print "DomainId :", di.DomainId, "; Tag : ", di.DomainTag.Data, "; isPeer =", di.IsPeer
        print "    Drt Update Count =", di.DrtUpdateCount, "; DrtUpdateTimeStamp = ", "%x" % di.DrtUpdateTimestamp
        print "    Rpt Update Count =", di.RptUpdateCount, "; RptUpdateTimeStamp = ", StrTime(di.RptUpdateTimestamp)
        print "    Dat Update Count =", di.DatUpdateCount, "; DatUpdateTimeStamp = ", StrTime(di.DatUpdateTimestamp)
	print "    Alarms : Active =" , di.ActiveAlarms, "; Critical =", di.CriticalAlarms, "; Major =", \
		di.MajorAlarms, "; Minor =", di.MinorAlarms
	print "    DatUserAlarmLimit =", di.DatUserAlarmLimit, "; DatOverflow =", di.DatOverflow


def rptinfo(r):
	if (type(r) == IntType):
		rpt = SaHpiRptEntryT()
		rv = saHpiRptEntryGetByResourceId(session, r, rpt)
		if (rv != SA_OK):
			print "Error: saHpiRptEntryGetByResourceId for resource", r, "returned", oh_lookup_error(rv)
			return
	else:
		rpt = r
	print "EntryId =", rpt.EntryId, " ; ResourceId =", rpt.ResourceId, "; Tag =", rpt.ResourceTag.Data
	print "Capabilities =", res_caps(rpt)
	if (And(rpt.ResourceCapabilities, SAHPI_CAPABILITY_MANAGED_HOTSWAP)):
		hscap = ""
		if (And(rpt.HotSwapCapabilities, SAHPI_HS_CAPABILITY_AUTOEXTRACT_READ_ONLY)):
			hscap = hscap + "AutoextractReadOnly "
		if (And(rpt.HotSwapCapabilities, SAHPI_HS_CAPABILITY_INDICATOR_SUPPORTED)):
			hscap = hscap + "IndicatorSupported "
		print "HotSwapCapabilities :", hsap
	print "ResourceInfo :  ResourceRev =", rpt.ResourceInfo.ResourceRev, "; SpecificVer =", rpt.ResourceInfo.SpecificVer, "; DeviceSupport =", rpt.ResourceInfo.DeviceSupport
	print "                ManufacturerId =", rpt.ResourceInfo.ManufacturerId, "; ProductId =", rpt.ResourceInfo.ProductId
	print "                Firmware :  MajorRev =", rpt.ResourceInfo.FirmwareMajorRev, "; MinorRev =", rpt.ResourceInfo.FirmwareMinorRev, "; AuxRev =", rpt.ResourceInfo.AuxFirmwareRev
	print "Severity =", rpt.ResourceSeverity, "; Failed =", rpt.ResourceFailed
	print "EntityPath =", make_epath(rpt.ResourceEntity)

def loginfo(linf):
	print "Entries =", linf.Entries, "; Size =", linf.Size, "; UserEventMaxSize =", linf.UserEventMaxSize
	print "UpdateTimestamp :", StrTime(linf.UpdateTimestamp), ";  CurrentTime     :", StrTime(linf.CurrentTime)
	print "Enabled =", linf.Enabled, "; OverflowFlag =", linf.OverflowFlag, "; OverflowResetable =", linf.OverflowResetable, "; OverflowAction =", linf.OverflowAction

def printsenevent(evt):
	se = evt.EventDataUnion.SensorEvent;
	if (se.Assertion):
		ass = 'ASSERTED'
	else:
		ass = 'DEASSERTED'
	print StrTime(evt.Timestamp), oh_lookup_eventtype(evt.EventType), evt.Source, '/', se.SensorNum,\
		oh_lookup_sensortype(se.SensorType), oh_lookup_eventcategory(se.EventCategory),\
		oh_lookup_eventcatstate(se.EventCategory, se.EventState), ':', ass
	pass  

def printresevent(evt):
	print StrTime(evt.Timestamp), evt.Source, "; Type =", oh_lookup_eventtype(evt.EventType),\
		"; State = ", oh_lookup_resourceeventtype(evt.EventDataUnion.ResourceEvent.ResourceEventType),\
		"; Severity =", oh_lookup_severity(evt.Severity)
	pass

def printhsevent(evt):
	print StrTime(evt.Timestamp), evt.Source, "; Type =", oh_lookup_eventtype(evt.EventType),\
		"; State = ", oh_lookup_hsstate(evt.EventDataUnion.HotSwapEvent.HotSwapState),\
		"; PrevState = ", oh_lookup_hsstate(evt.EventDataUnion.HotSwapEvent.PreviousHotSwapState),\
		"; Severity =", oh_lookup_severity(evt.Severity)
	pass
 
def printevent(evt, str):
	if (evt.EventType == SAHPI_ET_SENSOR):
		printsenevent(evt);
		return;
	if (evt.EventType == SAHPI_ET_RESOURCE):
		printresevent(evt);
		return;
	if (evt.EventType == SAHPI_ET_HOTSWAP):
		printhsevent(evt);
		return;
	print str, StrTime(evt.Timestamp), evt.Source, "; Type =", oh_lookup_eventtype(evt.EventType),\
		"; Severity =", oh_lookup_severity(evt.Severity)


def print_el_entry(ele):
#	print "EntryId =", ele.EntryId, "; Timestamp = ", StrTime(ele.Timestamp)
        printevent(ele.Event, ele.EntryId)

def showlog(rptid):
	e_id = SAHPI_OLDEST_ENTRY
	rdr = SaHpiRdrT()
	rpt = SaHpiRptEntryT()
	ele = SaHpiEventLogEntryT()
	while (1):
		rv = saHpiEventLogEntryGet(session, rptid, e_id, ele, rdr, rpt);
		if (rv["rv"] != SA_OK):
			print "Error: saHpiEventLogEntryGet returned", oh_lookup_error(rv["rv"])
			return
		print_el_entry(ele)
		if (rv["NextEntryId"] == SAHPI_NO_MORE_ENTRIES):
			return;
		e_id = rv["NextEntryId"]
	pass

def showrdrs(rptid):
	rdr = SaHpiRdrT()
	myrpt = SaHpiRptEntryT()
	rv = saHpiRptEntryGet(session, rptid, myrpt)
	if (rv["rv"] != SA_OK):
		print "Error: saHpiRptEntryGet returned", oh_lookup_error(rv["rv"])
		return
	if (not And(myrpt.ResourceCapabilities, SAHPI_CAPABILITY_RDR)):
		return
	e_id = SAHPI_FIRST_ENTRY
	print "    ######   RDRs for Resource", rptid, myrpt.ResourceTag.Data, ". Entity :", \
           make_epath(myrpt.ResourceEntity)
	while (1):
		rv = saHpiRdrGet(session, rptid, e_id, rdr)
		if (rv["rv"] != SA_OK):
			print "Error: saHpiRdrGet returned", oh_lookup_error(rv["rv"])
			return
		print oh_lookup_rdrtype(rdr.RdrType),": RecordId =", rdr.RecordId, \
			"; IsFru =", rdr.IsFru, rdr.IdString.Data

		if (rdr.RdrType == SAHPI_SENSOR_RDR):
			s = rdr.RdrTypeUnion.SensorRec
			print "       Num =", s.Num, "; Type =", oh_lookup_sensortype(s.Type), "; EnableCtrl = ", s.EnableCtrl,\
			"; Category =", oh_lookup_eventcategory(s.Category), "; States :", oh_lookup_eventcatstate(\
			s.Category, s.Events)
		e_id = rv["NextEntryId"]
		if (e_id == SAHPI_LAST_ENTRY): return
	pass



def getsensor(r, sid):
	if (type(r) == IntType):
		rpt = SaHpiRptEntryT()
		rv = saHpiRptEntryGetByResourceId(session, r, rpt)
		if (rv != SA_OK):
			print "saHpiRptEntryGetByResourceId fpr resource", r, "returned", rv
			return None
	else:
		rpt = r
	rdr = SaHpiRdrT();
	rv = saHpiRdrGetByInstrumentId(session, rpt.ResourceId, SAHPI_SENSOR_RDR, sid, rdr)
	if (rv != SA_OK):
		print "Error: saHpiRdrGetByIndtrumentId returned", oh_lookup_error(rv) 
		return None
	return rdr.RdrTypeUnion.SensorRec
	pass

def get_reading_val(rd):
	if (rd.IsSupported == SAHPI_FALSE): return "not supported"
	if (rd.Type == SAHPI_SENSOR_READING_TYPE_INT64):
		val = rd.Value.SensorUint64
	elif (rd.Type == SAHPI_SENSOR_READING_TYPE_UINT64):
		val = rd.Value.SensorUint64
	elif (rd.Type == SAHPI_SENSOR_READING_TYPE_FLOAT64):
		val = rd.Value.SensorFloat64
	elif (rd.Type == SAHPI_SENSOR_READING_TYPE_BUFFER):
		val = rd.Value.SensorBuffer
	else:
		val = None
	return val


def showthresholds(rid, sid):
	sen = getsensor(rid, sid)
	if (sen == None):
		return
	if (sen.Category != SAHPI_EC_THRESHOLD):
		print "Sensor", sen.Num, "isn't threshold sensor. It is ",\
			oh_lookup_eventcategory(sen.Category)
		return
	rd = SaHpiSensorReadingT()
	rv = saHpiSensorReadingGet(session, rid, sid, rd)
	if (rv["rv"] != SA_OK):
		print "Error: saHpiSensorReadingGet returned", oh_lookup_error(rv["rv"])
		return
	thrh = SaHpiSensorThresholdsT()
	rv = saHpiSensorThresholdsGet(session, rid, sid, thrh);
	if (rv != SA_OK):
		print "Error: saHpiSensorThresholdsGet returned", oh_lookup_error(rv)
		return
	print "    Reading         ", get_reading_val(rd)
	print "    LowCritical     ", get_reading_val(thrh.LowCritical)
	print "    LowMajor        ", get_reading_val(thrh.LowMajor)	
	print "    LowMinor        ", get_reading_val(thrh.LowMinor)	
	print "    UpCritical      ", get_reading_val(thrh.UpCritical)	
	print "    UpMajor         ", get_reading_val(thrh.UpMajor)
	print "    UpMinor         ", get_reading_val(thrh.UpMinor)
	print "    PosThdHysteresis", get_reading_val(thrh.PosThdHysteresis)
	print "    NegThdHysteresis", get_reading_val(thrh.NegThdHysteresis)	     
pass
		


def showevents():
	e = SaHpiEventT()
	while (1):
		rv = saHpiEventGet(session, SAHPI_TIMEOUT_IMMEDIATE, e, None, None)
		if (rv['rv'] == SA_OK): printevent(e, "")
		else: break
	if (rv['rv'] != SA_ERR_HPI_TIMEOUT): print "Error: saHpiEventGet returned", rv['rv']
	pass


def showcntrl(cnt):
	print "    CNTRL #%03i   %s %s WO=%i " % (cnt.Num, oh_lookup_ctrloutputtype(cnt.OutputType),\
		oh_lookup_ctrltype(cnt.Type), cnt.WriteOnly), " DefaultMode : RO =", cnt.DefaultMode.ReadOnly,\
		oh_lookup_ctrlmode(cnt.DefaultMode.Mode)
	if (cnt.Type == SAHPI_CTRL_TYPE_DIGITAL):
		print "        ", oh_lookup_ctrlstatedigital(cnt.TypeUnion.Digital.Default)
	elif (cnt.Type == SAHPI_TYPE_DISCRETE):
		print "        %08x" % (cnt.TypeUnion.Discrete)
	elif (cnt.Type == SAHPI_TYPE_ANALOG):
		a = cnt.TypeUnion.Analog 
		print "        Min = %08x  Max = %08x Default = %08x" % (a.Min, a.Max, a.Default)
	elif (cnt.Type == SAHPI_TYPE_STREAM):
		s = cnt.TypeUnion.Stream
		print "        Repeat = %i; StreamLength = %i; " % (s.Repeat, s.StreamLength)
	pass

		
def showrptcntrls(r):
	if (type(r) == IntType):
		rpt = SaHpiRptEntryT()
		rv = saHpiRptEntryGetByResourceId(session, r, rpt)
		if (rv != SA_OK):
			print "Error: saHpiRptEntryGetByResourceId for resource", r, "returned", oh_lookup_error(rv)
			return
	else:
		rpt = r
	print "CONTROLs for RPT: ", rpt.ResourceId, rpt.ResourceTag.Data
	e_id = SAHPI_FIRST_ENTRY
	rdr = SaHpiRdrT()						
	while (1):
		rv = saHpiRdrGet(session, rpt.ResourceId, e_id, rdr)
		if (rv["rv"] != SA_OK):
			print "Error: saHpiRdrGet returned", oh_lookup_error(rv["rv"])
			return
		if (rdr.RdrType == SAHPI_CTRL_RDR):
			showcntrl(rdr.RdrTypeUnion.CtrlRec) 
		e_id = rv["NextEntryId"]
		if (e_id == SAHPI_LAST_ENTRY): return
	pass
	
def initsession(did):
	rv = saHpiSessionOpen(did)
	if (rv["rv"] != SA_OK):
		print "Error: saHpiSessionOpen returned", rv["rv"]
		return 0
	session = rv["SessionId"]
	rv = saHpiSubscribe(session);
	if (rv != SA_OK):
		print "Error: saHpiSubscribe returned", rv
		return 0
	print "Discovery started, hold on....."
	rv = saHpiDiscover(session)
	if (rv != SA_OK):
		print "Error: saHpiDiscover returned", rv
		return 0
	print "working in session", session, "of domain", did
	return session


session = initsession(oh_get_default_domain_id())
lsres()
