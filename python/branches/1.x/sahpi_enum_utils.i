/*      -*- linux-c -*-
 *
 * (C) Copyright IBM Corp. 2004
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  This
 * file and program are licensed under a BSD style license.  See
 * the Copying file included with the OpenHPI distribution for
 * full licensing terms.
 *
 * Author(s):
 *      Steve Sherman <stevees@us.ibm.com> 
 */

/******************************************************************* 
 * WARNING! This file is auto-magically generated by:
 *          ./SaHpi2code.pl. 
 *          Do not change this file manually. Update script instead
 *******************************************************************/

#ifndef __SAHPI_ENUM_UTILS_H
#define __SAHPI_ENUM_UTILS_H

#ifdef __cplusplus
extern "C" {
#endif 

char * oh_lookup_language(SaHpiLanguageT value);
SaErrorT oh_encode_language(SaHpiTextBufferT *buffer, SaHpiLanguageT *type);

char * oh_lookup_texttype(SaHpiTextTypeT value);
SaErrorT oh_encode_texttype(SaHpiTextBufferT *buffer, SaHpiTextTypeT *type);

char * oh_lookup_entitytype(SaHpiEntityTypeT value);
SaErrorT oh_encode_entitytype(SaHpiTextBufferT *buffer, SaHpiEntityTypeT *type);

char * oh_lookup_sensortype(SaHpiSensorTypeT value);
SaErrorT oh_encode_sensortype(SaHpiTextBufferT *buffer, SaHpiSensorTypeT *type);

char * oh_lookup_sensorreadingtype(SaHpiSensorReadingTypeT value);
SaErrorT oh_encode_sensorreadingtype(SaHpiTextBufferT *buffer, SaHpiSensorReadingTypeT *type);

char * oh_lookup_sensoreventmaskaction(SaHpiSensorEventMaskActionT value);
SaErrorT oh_encode_sensoreventmaskaction(SaHpiTextBufferT *buffer, SaHpiSensorEventMaskActionT *type);

char * oh_lookup_sensorunits(SaHpiSensorUnitsT value);
SaErrorT oh_encode_sensorunits(SaHpiTextBufferT *buffer, SaHpiSensorUnitsT *type);

char * oh_lookup_sensormodunituse(SaHpiSensorModUnitUseT value);
SaErrorT oh_encode_sensormodunituse(SaHpiTextBufferT *buffer, SaHpiSensorModUnitUseT *type);

char * oh_lookup_sensoreventctrl(SaHpiSensorEventCtrlT value);
SaErrorT oh_encode_sensoreventctrl(SaHpiTextBufferT *buffer, SaHpiSensorEventCtrlT *type);

char * oh_lookup_ctrltype(SaHpiCtrlTypeT value);
SaErrorT oh_encode_ctrltype(SaHpiTextBufferT *buffer, SaHpiCtrlTypeT *type);

char * oh_lookup_ctrlstatedigital(SaHpiCtrlStateDigitalT value);
SaErrorT oh_encode_ctrlstatedigital(SaHpiTextBufferT *buffer, SaHpiCtrlStateDigitalT *type);

char * oh_lookup_ctrlmode(SaHpiCtrlModeT value);
SaErrorT oh_encode_ctrlmode(SaHpiTextBufferT *buffer, SaHpiCtrlModeT *type);

char * oh_lookup_ctrloutputtype(SaHpiCtrlOutputTypeT value);
SaErrorT oh_encode_ctrloutputtype(SaHpiTextBufferT *buffer, SaHpiCtrlOutputTypeT *type);

char * oh_lookup_idrareatype(SaHpiIdrAreaTypeT value);
SaErrorT oh_encode_idrareatype(SaHpiTextBufferT *buffer, SaHpiIdrAreaTypeT *type);

char * oh_lookup_idrfieldtype(SaHpiIdrFieldTypeT value);
SaErrorT oh_encode_idrfieldtype(SaHpiTextBufferT *buffer, SaHpiIdrFieldTypeT *type);

char * oh_lookup_watchdogaction(SaHpiWatchdogActionT value);
SaErrorT oh_encode_watchdogaction(SaHpiTextBufferT *buffer, SaHpiWatchdogActionT *type);

char * oh_lookup_watchdogactionevent(SaHpiWatchdogActionEventT value);
SaErrorT oh_encode_watchdogactionevent(SaHpiTextBufferT *buffer, SaHpiWatchdogActionEventT *type);

char * oh_lookup_watchdogpretimerinterrupt(SaHpiWatchdogPretimerInterruptT value);
SaErrorT oh_encode_watchdogpretimerinterrupt(SaHpiTextBufferT *buffer, SaHpiWatchdogPretimerInterruptT *type);

char * oh_lookup_watchdogtimeruse(SaHpiWatchdogTimerUseT value);
SaErrorT oh_encode_watchdogtimeruse(SaHpiTextBufferT *buffer, SaHpiWatchdogTimerUseT *type);

char * oh_lookup_hsindicatorstate(SaHpiHsIndicatorStateT value);
SaErrorT oh_encode_hsindicatorstate(SaHpiTextBufferT *buffer, SaHpiHsIndicatorStateT *type);

char * oh_lookup_hsaction(SaHpiHsActionT value);
SaErrorT oh_encode_hsaction(SaHpiTextBufferT *buffer, SaHpiHsActionT *type);

char * oh_lookup_hsstate(SaHpiHsStateT value);
SaErrorT oh_encode_hsstate(SaHpiTextBufferT *buffer, SaHpiHsStateT *type);

char * oh_lookup_severity(SaHpiSeverityT value);
SaErrorT oh_encode_severity(SaHpiTextBufferT *buffer, SaHpiSeverityT *type);

char * oh_lookup_resourceeventtype(SaHpiResourceEventTypeT value);
SaErrorT oh_encode_resourceeventtype(SaHpiTextBufferT *buffer, SaHpiResourceEventTypeT *type);

char * oh_lookup_domaineventtype(SaHpiDomainEventTypeT value);
SaErrorT oh_encode_domaineventtype(SaHpiTextBufferT *buffer, SaHpiDomainEventTypeT *type);

char * oh_lookup_sweventtype(SaHpiSwEventTypeT value);
SaErrorT oh_encode_sweventtype(SaHpiTextBufferT *buffer, SaHpiSwEventTypeT *type);

char * oh_lookup_eventtype(SaHpiEventTypeT value);
SaErrorT oh_encode_eventtype(SaHpiTextBufferT *buffer, SaHpiEventTypeT *type);

char * oh_lookup_statuscondtype(SaHpiStatusCondTypeT value);
SaErrorT oh_encode_statuscondtype(SaHpiTextBufferT *buffer, SaHpiStatusCondTypeT *type);

char * oh_lookup_annunciatormode(SaHpiAnnunciatorModeT value);
SaErrorT oh_encode_annunciatormode(SaHpiTextBufferT *buffer, SaHpiAnnunciatorModeT *type);

char * oh_lookup_annunciatortype(SaHpiAnnunciatorTypeT value);
SaErrorT oh_encode_annunciatortype(SaHpiTextBufferT *buffer, SaHpiAnnunciatorTypeT *type);

char * oh_lookup_rdrtype(SaHpiRdrTypeT value);
SaErrorT oh_encode_rdrtype(SaHpiTextBufferT *buffer, SaHpiRdrTypeT *type);

char * oh_lookup_parmaction(SaHpiParmActionT value);
SaErrorT oh_encode_parmaction(SaHpiTextBufferT *buffer, SaHpiParmActionT *type);

char * oh_lookup_resetaction(SaHpiResetActionT value);
SaErrorT oh_encode_resetaction(SaHpiTextBufferT *buffer, SaHpiResetActionT *type);

char * oh_lookup_powerstate(SaHpiPowerStateT value);
SaErrorT oh_encode_powerstate(SaHpiTextBufferT *buffer, SaHpiPowerStateT *type);

char * oh_lookup_eventlogoverflowaction(SaHpiEventLogOverflowActionT value);
SaErrorT oh_encode_eventlogoverflowaction(SaHpiTextBufferT *buffer, SaHpiEventLogOverflowActionT *type);

char * oh_lookup_error(SaErrorT value);
SaErrorT oh_encode_error(SaHpiTextBufferT *buffer, SaErrorT *type);

char * oh_lookup_eventcategory(SaHpiEventCategoryT value);
SaErrorT oh_encode_eventcategory(SaHpiTextBufferT *buffer, SaHpiEventCategoryT *type);


#ifdef __cplusplus
}
#endif

#endif

